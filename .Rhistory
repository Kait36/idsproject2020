#Histogram of the Mean Radius of nuclei
ggplot(data = cancer_df, aes(x = radius_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Mean Radius of nuclei')
ggplot(cancer_df, aes(x = radius_mean, color = diagnosis, fill = diagnosis)) +
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.2)
#Histogram of the texture_mean
ggplot(data = cancer_df, aes(x = texture_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Texture Mean of nuclei')
#Histogram of the perimeter_mean
ggplot(data = cancer_df, aes(x = perimeter_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Mean of nuclei perimeter')
#Histogram of the area_mean
ggplot(data = cancer_df, aes(x = area_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Mean Area of nuclei')
#Histogram of the smoothness_mean
ggplot(data = cancer_df, aes(x = smoothness_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Smoothness Mean of nuclei')
#Histogram of the compactness_mean
ggplot(data = cancer_df, aes(x = compactness_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Compactness Mean of nuclei')
#Histogram of the concavity_mean
ggplot(data = cancer_df, aes(x = concavity_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Concavity Mean of nuclei')
#Histogram of the concave points_mean
ggplot(data = cancer_df, aes(x = `concave points_mean`)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Concave Points Mean of nuclei')
#Histogram of the symmetry_mean
ggplot(data = cancer_df, aes(x = symmetry_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Symmetry Mean of nuclei')
#Histogram of the symmetry_mean
ggplot(data = cancer_df, aes(x = fractal_dimension_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Fractal Dimension Mean of nuclei')
library(GGally)
#Pair plot between variables
ggpairs(cancer_df[ , c(3:12)])
install.packages("caret", dependencies = TRUE)
# First, rescale the data
# create the rescaling function we have been using thus far
rescale_x <- function(x){(x-min(x))/(max(x)-min(x))}
# create a copy of the df
rescaled_df <- cancer_df
# retain only the first two columns and all the 'mean' data
rescaled_df <- rescaled_df[1:12]
# apply the rescale function to all columns except id and diagnosis
rescaled_df[3:12] <- sapply(rescaled_df[3:12],rescale_x)
# confirm rescaling worked correctly
# all rescaled vars should be within [0,1]
summary(rescaled_df)
# Now split the data
# set the seed to Notre Dame's founding year
set.seed(1842)
# determine the number of rows in the dataframe
n <- nrow(rescaled_df)
# get a list of 20% of the rows in combined to use as indices
test_idx <- sample.int(n, size = round(0.2 * n))
# set the the training data to be those rows not matching the index list
training <- rescaled_df[-test_idx,]
# show the number of training rows
nrow(training)
glimpse(training)
# set the the test data to be those rows matching the index list
testing <- rescaled_df[test_idx,]
# show the number of test rows
nrow(testing)
glimpse(training)
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
dim(training);dim(testing);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 20)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv", number = 20, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
confusionMatrix(diag_knn,testing$diagnosis)
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "boot")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
confusionMatrix(factor)diag_knn,testing$diagnosis)
confusionMatrix(factor(diag_knn),testing$diagnosis)
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
sum(diag(confusion_1)/nrow(testing))
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
f"option 1"
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print"option 1"
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
print("Option 2")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
print(\n"Option 2")
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
print("\nOption 2")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
print("Option 2")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
cat("\nOption 2")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
cat("\nOption 2\n")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
print("Option 1")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
cat("\n*** Option 2 ***\n")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### I would like your feedback
### Option 1
cat("\n*** Option 1 ***\n")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
cat("\n*** Option 2 ***\n")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
# run the KNN classifier with k = 3, which is roughly sqrt(10)
diag_knn <- knn(training[3:12],testing[3:12],cl=training$diagnosis,k=3)
### Note to Avisek and Kait - we should pick either option 1 or two below
### Option 2 adds more information, but I don't know if it is useful
### I would like your feedback
### Option 1
cat("\n*** Option 1 ***\n")
# create and display the confusion matrix
confusion_1 <- table(diag_knn, testing$diagnosis)
confusion_1
# show the accuracy of the KNN classification
sum(diag(confusion_1)/nrow(testing))
### Option 2
cat("\n*** Option 2 ***\n")
# create and display the confusion matrix
confusionMatrix(factor(diag_knn),factor(testing$diagnosis))
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
#tuneLength = 10)
search = "random")
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "cv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "cv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 50)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "cv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcOptions = list(thresh = 0.95, ICAcomp = 3, k = 1, freqCut = 95/5, uniqueCut =
10, cutoff = 0.9),
#preProcess = c("center", "scale"),
tuneLength = 10)
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcOptions = list(k = 1),
#preProcess = c("center", "scale"),
tuneLength = 10)
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
preProcOptions = list(k = 3),
#preProcess = c("center", "scale"),
tuneLength = 10)
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
# convert diagnosis into a factor
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 10)
knn_fit
dim(training[-1]);dim(testing[-1]);
anyNA(rescaled_df)
# convert diagnosis into a factor
training$diagnosis <- factor(training$diagnosis)
trctrl <- trainControl(method = "repeatedcv")#, number = 10, repeats = 3)
set.seed(1842)
knn_fit <- train(diagnosis ~., data = training[-1], method = "knn",
trControl=trctrl,
#preProcess = c("center", "scale"),
tuneLength = 50)
knn_fit
ggplot(cancer_df[ , c(13:23)] %>%
pivot_longer(cols = radius_se:fractal_dimension_se),
aes(value, fill = diagnosis)) +
geom_histogram(bins = 10) +
facet_wrap(~name, scales = 'free_x')
install.packages('caret', dependencies = TRUE)
#Load the necessary libraries
library(tidyverse)
library(class)
library(caret)
#Load the dataset that was previously downloaded
cancer_df <- read_csv('C:/MSDS/Spring 2020/IDS/Project/FNA_cancer.csv')
#Print the dataset
head(cancer_df)
# ggplot(cancer_df[ , c(3:12)] %>% gather(), aes(value)) +
#     geom_histogram(bins = 10) +
#     facet_wrap(~key, scales = 'free_x')
ggplot(cancer_df[ , c(2:12)] %>%
pivot_longer(cols = radius_mean:fractal_dimension_mean),
aes(value, fill = diagnosis)) +
geom_histogram(bins = 10) +
facet_wrap(~name, scales = 'free_x')
#Histogram of the Mean Radius of nuclei
ggplot(data = cancer_df, aes(x = radius_mean)) +
geom_histogram(aes(fill = diagnosis), alpha = 0.5) +
xlab('Mean Radius of nuclei')
install.packages('caret', dependencies = TRUE)
#Load the necessary libraries
library(tidyverse)
library(class)
library(caret)
#Load the dataset that was previously downloaded
cancer_df <- read_csv('C:/MSDS/Spring 2020/IDS/Project/FNA_cancer.csv')
#Print the dataset
head(cancer_df)
# ggplot(cancer_df[ , c(3:12)] %>% gather(), aes(value)) +
#     geom_histogram(bins = 10) +
#     facet_wrap(~key, scales = 'free_x')
ggplot(cancer_df[ , c(2:12)] %>%
pivot_longer(cols = radius_mean:fractal_dimension_mean),
aes(value, fill = diagnosis)) +
geom_histogram(bins = 10) +
facet_wrap(~name, scales = 'free_x')
